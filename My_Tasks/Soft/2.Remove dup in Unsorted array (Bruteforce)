import java.util.Scanner;

public class RemoveDuplicatesLength {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Step 1: Get input size
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        // Step 2: Get array elements
        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Step 3: Sort the array (Bubble Sort manually)
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        // Step 4: Remove duplicates
        int[] temp = new int[n];
        int j = 0;

        for (int i = 0; i < n - 1; i++) {
            if (arr[i] != arr[i + 1]) {
                temp[j] = arr[i];
                j++;
            }
        }
        temp[j] = arr[n - 1];
        j++;

        // Step 5: Print the length after removing duplicates
        System.out.println("Length after removing duplicates: " + j);

        // Print the array after removing duplicates
        System.out.print("Array after removing duplicates: ");
        for (int i = 0; i < j; i++) {
            System.out.print(temp[i] + " ");
        }
    }
}




Enter number of elements: 9
Enter 9 elements:
3 4 4 5 5 5 1 1 2
Length after removing duplicates: 5
Array after removing duplicates: 1 2 3 4 5

✅ Final Result:

Time Complexity: O(n²)

Space Complexity: O(n)
